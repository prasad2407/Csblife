#define _USE_MATH_DEFINES

#include <stdlib.h>
#include <stdio.h>
#include <conio.h>
#include <cmath>
#include <math.h>

/* OpenGL Library */
#include <glut.h>

int CubeAngle = 0;
float X = 0.0, Y = 0.0, R = 1.0;
float RAngle = 0.0;
float CenterX = 0.0, CenterY = 0.0;

float AngleY = 0.0;
float AngleX = 0.0;
float ConeX = 0.0;
float ConeY = 0.0;

/* Contains all drawings and animations */
void GameScene()
{
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  {
  //glPushMatrix();
  //  glRotatef(30.0, 1.0, 0.0, 0.0);

  //  CubeAngle = (CubeAngle + 1) % 360;    
  //  glRotatef(CubeAngle, 0.0, 1.0, 0.0);

  //  glTranslatef(0.0, 0.0, -0.5);
  //  
  //  glColor3f(1.0, 0.0, 0.0);
  //  glutSolidCube(0.3);
  //glPopMatrix();

  //glColor3f(1.0, 1.0, 0.0);
  //glutSolidSphere(0.3, 50, 50);

  /* drawing a circle */
  //glPushMatrix();
  //  ++Angle;
  //  RAngle = Angle * M_PI / 180;
  //  X = (R * cos(RAngle)) + CenterX;
  //  Y = (R * sin(RAngle)) + CenterY;
  //  glTranslatef(X, Y, 0.0);
  //  glRotatef(Angle, 0.0, 1.0, 0.0);
  //  glutSolidCube(0.3);
  //glPopMatrix();

  //Angle += 10.0;
  //glRotatef(Angle, 0.0, 1.0, 0.0);
  //glutSolidCube(2.5);
  }
  glPushMatrix();
    glTranslatef(ConeX, ConeY, 0.0);
    glRotatef(AngleX, 1.0, 0.0, 0.0);
    glRotatef(AngleY, 0.0, 1.0, 0.0);
    glTranslatef(0.0, -2.0, 0.0);

    glPushMatrix();
      glRotatef(90.0, -1.0, 0.0, 0.0);  
      glutSolidCone(1.5, 3.0, 50, 1);
    glPopMatrix();

    glPushMatrix();
      glTranslatef(0.0, 5.0, 0.0);
      glRotatef(90.0, 1.0, 0.0, 0.0);  
      glutSolidCone(1.0, 3.0, 50, 1);
    glPopMatrix();
  glPopMatrix();

  glutSwapBuffers();
}

/* Controls framerate */
void Timer(int extra)
{
  glutPostRedisplay();
  glutTimerFunc(10, Timer, extra);
}

/* Controls the camera */
void ResizeWindow(int w, int h)
{
  float ratio = 1.0 * w / h;
  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();

  glViewport(0, 0, w, h);
  
  gluPerspective(30.0, ratio, 1, 1000);

  glMatrixMode(GL_MODELVIEW);
  glLoadIdentity();

  gluLookAt(0.0, 0.0, 20.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
}

void Keys(unsigned char key, int x, int y)
{
  switch(key)
  {
    case 'a':
      /* move cube to the left */
      //CenterX--;

      ConeX -= 1.0;
      break;

    case 'd':
      /* move cube to the right */
      //CenterX++;

      ConeX += 1.0;
      break;
    
    case 'w':
      ConeY += 1.0;
      break;

    case 's':
      ConeY -= 1.0;
      break;

    case 27:
      exit(0);
  }
}


void SpecialKeys(int key, int x, int y)
{
  switch(key)
  {
    case GLUT_KEY_UP:
      AngleX -= 1.0;
      break;

    case GLUT_KEY_DOWN:
      AngleX += 1.0;
      break;

    case GLUT_KEY_LEFT:
      AngleY -= 1.0;
      break;

    case GLUT_KEY_RIGHT:
      AngleY += 1.0;
      break;
  }
}

/* Main program */
void main(int argc, char **argv)
{
/* OpenGL Setup */
  glutInit(&argc, argv);
  glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGBA);

/* Setup drawing window */
  glutInitWindowPosition(0, 0);
  glutInitWindowSize(300, 300);
  glutCreateWindow("Hello OpenGL");

  glutReshapeFunc(ResizeWindow);

  glutDisplayFunc(GameScene);
  //glutIdleFunc(GameScene);

/* Controls animation speed or FrameRate */
  glutTimerFunc(0, Timer, 0);

/* Enables Depth */
  glEnable(GL_DEPTH_TEST);

/* Lighting */
  glEnable(GL_LIGHT0);
  glEnable(GL_LIGHTING);
  glEnable(GL_NORMALIZE);

/* Enables keyboard controls */
  glutKeyboardFunc(Keys);
  glutSpecialFunc(SpecialKeys);

/* Loops the GameScene */
  glutMainLoop();
}